@model WebShopSolution.ViewModels.Catalog.Product.ProductListViewModel
@using WebShopSolution.ViewModels.Catalog.Category



@{
    ViewData["Title"] = "Tất Cả Sản Phẩm";
    var noImage = ViewBag.NoImagePath as string;
    int productIndex = 0;
}


<!-- Search Box -->
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <input id="searchInput" type="text" class="form-control" placeholder="Tìm kiếm sản phẩm..." />
        </div>
    </div>
</div>


<div class="container">
    <div class="row">
        <!-- DANH MỤC -->
        <div class="col-md-3">
            <div class="mb-4">
                <h5 class="mb-3 text-primary">Danh mục sản phẩm</h5>
                <ul class="category-list">
                    @if (ViewBag.Categories is List<CategoryViewModel> categories)
                    {
                        foreach (var parent in categories.Where(c => c.ParentId == null))
                        {
                            <li>
                                <a class="category-link @(ViewBag.SelectedCategoryId == parent.IdCate ? "active" : "")"
                                   href="@Url.Action("Index", "Product", new { categoryId = parent.IdCate })">
                                    @parent.CateName
                                </a>

                                @if (parent.Children != null && parent.Children.Any())
                                {
                                    <ul class="subcategory-list">
                                        @foreach (var child in parent.Children)
                                        {
                                            <li>
                                                <a class="category-link subcategory @(ViewBag.SelectedCategoryId == child.IdCate ? "active" : "")"
                                                   href="@Url.Action("Index", "Product", new { categoryId = child.IdCate })">
                                                    ↳ @child.CateName
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>


        <!-- DANH SÁCH SẢN PHẨM -->
        <div class="col-md-9">
            <h2 id="product-list" class="text-center section-title">Danh Sách Sản Phẩm</h2>
            <div class="row">
                @* Vòng lặp sản phẩm như bạn đã có *@
                @foreach (var product in Model.Products)
                {
                    var images = product.ProductImages;
                    var carouselId = "carouselProduct_" + productIndex++;

                    <div class="col-md-4 mb-4 product-card">
                        <div class="card h-100 shadow">
                            <a href="@Url.Action("Detail", "Product", new { id = product.IdProduct })" class="text-decoration-none text-dark">
                                <div id="@carouselId" class="carousel slide" data-bs-ride="carousel">
                                    <div class="carousel-inner">
                                        @for (int i = 0; i < images.Count; i++)
                                        {
                                            var img = string.IsNullOrEmpty(images[i].ImagePath) ? noImage : images[i].ImagePath;
                                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                                <img src="@img" class="d-block w-100" alt="@product.ProductName" />
                                            </div>
                                        }
                                    </div>
                                    @if (images.Count > 1)
                                    {
                                        <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
                                            <span class="carousel-control-prev-icon"></span>
                                        </button>
                                        <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
                                            <span class="carousel-control-next-icon"></span>
                                        </button>
                                    }
                                </div>

                                <div class="card-body">
                                    <h5 class="card-title">@product.ProductName</h5>
                                    @{
                                        int? displayPrice = product.BasePrice;
                                        if (displayPrice == null && product.Variants != null && product.Variants.Any())
                                        {
                                            displayPrice = product.Variants.Min(v => (int?)v.Price);
                                        }
                                    }
                                    <p class="card-text price-text">Giá: @string.Format("{0:N0} đ", displayPrice ?? 0)</p>
                                    <p class="text-muted">Loại: @product.CategoryName</p>
                                </div>
                            </a>
                        </div>
                    </div>
                }
            </div>
            <!-- PHÂN TRANG -->
            <nav aria-label="Product pagination">
                <ul class="pagination justify-content-center mt-4">
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                            <a class="page-link"
                               href="@Url.Action("Index", "Product", new { categoryId = ViewBag.SelectedCategoryId, page = i })">
                                @i
                            </a>
                        </li>
                    }
                </ul>
            </nav>

        </div>
    </div>
</div>



<!-- CSS -->
<style>
    .pagination .page-link {
        color: var(--blue);
    }

    .pagination .page-item.active .page-link {
        background-color: var(--orange);
        border-color: var(--orange);
        color: white;
    }
    .category-list,
    .subcategory-list {
        list-style: none;
        padding-left: 0;
    }

    .category-link {
        display: block;
        padding: 8px 12px;
        text-decoration: none;
        color: #333;
        transition: background-color 0.2s;
        border-radius: 5px;
    }

        .category-link:hover {
            background-color: #f5f5f5;
        }

    .subcategory {
        padding-left: 20px;
        color: #555;
        font-style: italic;
    }

    .category-link.active {
        background-color: var(--orange);
        color: white;
        font-weight: bold;
    }

    .list-group-item.active {
        background-color: var(--orange);
        border-color: var(--orange);
        color: white;
    }

    .list-group-item:hover {
        background-color: #ffe8d6;
    }

    .section-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--blue);
        margin-bottom: 25px;
    }

    .product-card .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }


    .price-text {
        font-size: 1.2rem; /* Tăng cỡ chữ */
        color: #e60000; /* Màu đỏ tươi */
        font-weight: bold; /* In đậm */
    }

    :root {
        --orange: #ff6600;
        --blue: #005b96;
        --gray-bg: #f9f9f9;
        --text-dark: #333;
    }

    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: white;
    }

    .banner-image-container {
        position: relative;
        width: 100%;
        height: 450px;
        overflow: hidden;
    }

    .banner-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: brightness(0.7);
    }

    .banner-text-overlay {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        text-align: center;
    }

    .main-heading {
        font-size: 3rem;
        font-weight: 700;
        text-shadow: 0 2px 8px rgba(0,0,0,0.5);
    }

    .sub-heading {
        font-size: 1.2rem;
        font-weight: 300;
        margin-top: 10px;
    }

    .btn-orange {
        background-color: var(--orange);
        border: none;
        padding: 12px 24px;
        color: white;
        border-radius: 5px;
        font-weight: bold;
        text-transform: uppercase;
    }

        .btn-orange:hover {
            background-color: #e65c00;
        }

    .section-title {
        font-size: 2rem;
        font-weight: bold;
        color: var(--blue);
        margin-bottom: 30px;
        position: relative;
    }

        .section-title::after {
            content: '';
            width: 60px;
            height: 3px;
            background-color: var(--orange);
            display: block;
            margin: 10px auto 0;
        }

    .product-card .card {
        transition: 0.3s ease-in-out;
        border: none;
    }

        .product-card .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }

    .card-title {
        color: var(--text-dark);
        font-size: 1.1rem;
        font-weight: 600;
    }

    .card-text {
        font-size: 0.95rem;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(100%);
    }
</style>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const cards = document.querySelectorAll(".product-card");

        searchInput.addEventListener("input", function () {
            const keyword = this.value.toLowerCase();

            cards.forEach(card => {
                const name = card.querySelector(".card-title").innerText.toLowerCase();
                if (name.includes(keyword)) {
                    card.style.display = "block";
                } else {
                    card.style.display = "none";
                }
            });
        });
    });
</script>
